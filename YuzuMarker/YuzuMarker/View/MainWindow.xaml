<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:YuzuMarker.View"
        xmlns:vm="clr-namespace:YuzuMarker.ViewModel"
        xmlns:uc="clr-namespace:YuzuMarker.Control"
        xmlns:vc="clr-namespace:YuzuMarker.Converter"
        xmlns:p="clr-namespace:YuzuMarker.Properties"
        x:Class="YuzuMarker.View.MainWindow"
        mc:Ignorable="d"
        KeyDown="Window_KeyDown"
        KeyUp="Window_OnKeyUp"
        MouseLeftButtonUp="Window_OnMouseLeftButtonUp"
        Title="YuzuMarker by gyro永不抽风" Height="860" Width="1000">
    <Window.DataContext>
        <vm:YuzuProjectViewModel/>
    </Window.DataContext>
    <Window.Resources>
        <vc:Object2Boolean x:Key="BoolVC"/>
        <vc:Boolean2Visibility x:Key="Boolean2Visibility"/>
        <vc:Boolean2ColorBrush x:Key="ColorStatus"/>
        <vc:NotationGroup2Index x:Key="NotationGroup2Index"/>
        <vc:NotationGroup2IndexString x:Key="NotationGroup2IndexString"/>
        <vc:NotationGroup2CanvasItem x:Key="NotationGroup2CanvasItem"/>
        <vc:CleaningNotation2Boolean4Color x:Key="CleaningNotation2Boolean4Color"/>
        <vc:CleaningNotation2Boolean4Impainting x:Key="CleaningNotation2Boolean4Impainting"/>
        <vc:NotationGroup2CleaningStatusString x:Key="NotationGroup2CleaningStatusString"/>
        <vc:NotationGroup2CleaningStatusColor x:Key="NotationGroup2CleaningStatusColor"/>
        <vc:Cleaning2StatusString x:Key="Cleaning2StatusString"/>
        <vc:SelectionControllerVisibility x:Key="SelectionControllerVisibility"/>
        <vc:MaskUMat2Bitmap x:Key="MaskUMat2Bitmap"/>
        <vc:SelectionModeConverter x:Key="SelectionModeConverter"/>
        <vc:SelectionTypeConverter x:Key="SelectionTypeConverter"/>
        <vc:ShapeData2LeftConverter x:Key="ShapeData2LeftConverter"/>
        <vc:ShapeData2TopConverter x:Key="ShapeData2TopConverter"/>
        <vc:NegativeLengthDataConverter x:Key="NegativeLengthDataConverter"/>
        <vc:Standard2WindowsColorConverter x:Key="Standard2WindowsColorConverter"/>
    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Command="{Binding CreateProject}" Modifiers="Ctrl" Key="N"/>
        <KeyBinding Command="{Binding LoadProject}" Modifiers="Ctrl" Key="O"/>
        <KeyBinding Command="{Binding SaveProject}" Modifiers="Ctrl" Key="S"/>
        <KeyBinding Command="{Binding UndoStep}" Modifiers="Ctrl" Key="Z"/>
        <KeyBinding Command="{Binding RedoStep}" Modifiers="Ctrl+Shift" Key="Z"/>
    </Window.InputBindings>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="50" Width="1*"/>
            <ColumnDefinition Width="2"/>
            <ColumnDefinition MinWidth="50" Width="2*"/>
            <ColumnDefinition Width="2"/>
            <ColumnDefinition MinWidth="50" Width="1.5*"/>
        </Grid.ColumnDefinitions>
        <Menu Grid.Row="0" Grid.ColumnSpan="5">
            <MenuItem Header="文件">
                <MenuItem Command="{Binding CreateProject}" Header="新建项目" InputGestureText="Ctrl+N"/>
                <MenuItem Command="{Binding LoadProject}" Header="打开项目" InputGestureText="Ctrl+O"/>
                <MenuItem Command="{Binding SaveProject}" Header="保存项目" InputGestureText="Ctrl+S" 
                          IsEnabled="{Binding Project, Mode=OneWay, Converter={StaticResource BoolVC}}"/>
            </MenuItem>
            <MenuItem Header="编辑">
                <MenuItem Command="{Binding UndoStep}" Header="撤销" InputGestureText="Ctrl+Z"
                          IsEnabled="{Binding SelectedImageItem, Mode=OneWay, Converter={StaticResource BoolVC}}"/>
                <MenuItem Command="{Binding RedoStep}" Header="重做" InputGestureText="Shift+Ctrl+Z"
                          IsEnabled="{Binding SelectedImageItem, Mode=OneWay, Converter={StaticResource BoolVC}}"/>
            </MenuItem>
        </Menu>
        <GridSplitter HorizontalAlignment="Stretch" Grid.Row="1" Grid.Column="1"/>
        <GridSplitter HorizontalAlignment="Stretch" Grid.Row="1" Grid.Column="3"/>
        <Grid Grid.Row="1" Grid.Column="0" ClipToBounds="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <StackPanel Grid.Row="0" 
                    Orientation="Horizontal">
                    <Button Margin="2" Command="{Binding AddImages}"
                    IsEnabled="{Binding Project, Mode=OneWay, Converter={StaticResource BoolVC}}"> + </Button>
                    <Button Margin="2" Command="{Binding DeleteImage}"
                    IsEnabled="{Binding ImageSource, Mode=OneWay, Converter={StaticResource BoolVC}}"> - </Button>
                    <Button Margin="2" Command="{Binding MoveSelectedImageUp}"
                    IsEnabled="{Binding ImageSource, Mode=OneWay, Converter={StaticResource BoolVC}}"> ↑ </Button>
                    <Button Margin="2" Command="{Binding MoveSelectedImageDown}"
                    IsEnabled="{Binding ImageSource, Mode=OneWay, Converter={StaticResource BoolVC}}"> ↓ </Button>
                    <Button Margin="2" Command="{Binding SetImageFinishStatus}"
                    IsEnabled="{Binding ImageSource, Mode=OneWay, Converter={StaticResource BoolVC}}"
                    Background="{Binding SelectedImageItem.IsFinished, Mode=OneWay, Converter={StaticResource ColorStatus}}"> √ </Button>
                </StackPanel>
                <ListView Grid.Row="1" x:Name="FileListView"
                      ItemsSource="{Binding Images, Mode=OneWay}" 
                      SelectedItem="{Binding SelectedImageItem, Mode=TwoWay}">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="图片列表">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <TextBlock Text="{Binding ImageName}" 
                                               Foreground="{Binding IsFinished, Converter={StaticResource ColorStatus}}"/>
                                        </Grid>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                </ListView>
            </Grid>
            <Rectangle Fill="#7F000000" Visibility="{Binding SelectionModeEnabled, Converter={StaticResource Boolean2Visibility}}" MouseDown="ShadeMouseDown"/>
        </Grid>
        <!--这里的数据绑定的DataContext是CommonZoomView, 所以定义了一个BindingProxy来将DataContext换为祖先-->
        <Grid Grid.Row="1" Grid.Column="2" ClipToBounds="True">
            <uc:CommonZoomView CanDefaultMouseMoveEvent="CanDefaultMouseMoveEventHappen" CustomMouseMoveEvent="CustomMouseMoveEvent" CanCustomMouseMoveEvent="CanCustomMouseMoveEventHappen"
                ContentHeight="{Binding Data.ImageSource.Height, Source={StaticResource BindingProxy}}" 
                ContentWidth="{Binding Data.ImageSource.Width, Source={StaticResource BindingProxy}}" 
                ContentBackground="#FFDAD5D5">
                <uc:CommonZoomView.ContainerContent>
                    <Grid ClipToBounds="True" MouseDown="ImageAreaMouseDown">
                        <Image Source="{Binding Data.ImageSource, Mode=OneWay, Source={StaticResource BindingProxy}}"></Image>
                        <ItemsControl ItemsSource="{Binding Data.NotationGroups, Mode=OneWay, Source={StaticResource BindingProxy}}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <ContentPresenter MouseDown="NotationRenderItemClicked">
                                        <ContentPresenter.Content>
                                            <MultiBinding Converter="{StaticResource NotationGroup2CanvasItem}">
                                                <Binding/>
                                                <Binding Path="DummyObject"/>
                                            </MultiBinding>
                                        </ContentPresenter.Content>
                                    </ContentPresenter>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                        <ItemsControl ItemsSource="{Binding Data.NotationGroups, Mode=OneWay, Source={StaticResource BindingProxy}}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemContainerStyle>
                                <Style>
                                    <Setter Property="Canvas.Left" Value="{Binding X, Mode=OneWay}"/>
                                    <Setter Property="Canvas.Top" Value="{Binding Y, Mode=OneWay}"/>
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Button Command="{Binding Data.SelectNotationGroup, Source={StaticResource BindingProxy}}"
                                            CommandParameter="{Binding Content, RelativeSource={RelativeSource Self}}" Width="20">
                                        <Button.Content>
                                            <MultiBinding Converter="{StaticResource NotationGroup2Index}">
                                                <Binding/>
                                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}}" 
                                                         Path="DataContext.NotationGroups"/>
                                            </MultiBinding>
                                        </Button.Content>
                                    </Button>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                        <Rectangle MouseDown="SelectionMouseDownEvent" Fill="{Binding Source={x:Static p:Settings.Default}, Path=LassoModeBackgroundColor}" 
                            Visibility="{Binding Data.SelectionModeEnabled, Source={StaticResource BindingProxy}, Converter={StaticResource Boolean2Visibility}}"/>
                        <uc:NonClickableImage Visibility="{Binding Data.SelectionModeEnabled, Source={StaticResource BindingProxy}, Converter={StaticResource Boolean2Visibility}}"
                            Source="{Binding Data.SelectionMaskUMat, Source={StaticResource BindingProxy}, Converter={StaticResource MaskUMat2Bitmap}}"/>
                        <Canvas Visibility="{Binding Data.SelectionModeEnabled, Source={StaticResource BindingProxy}, Converter={StaticResource Boolean2Visibility}}">
                            <Rectangle Canvas.Top="{Binding Data.RectangleShapeData, Source={StaticResource BindingProxy}, Converter={StaticResource ShapeData2TopConverter}}"
                                       Canvas.Left="{Binding Data.RectangleShapeData, Source={StaticResource BindingProxy}, Converter={StaticResource ShapeData2LeftConverter}}"
                                       Width="{Binding Data.RectangleShapeData.Width, Source={StaticResource BindingProxy}, Converter={StaticResource NegativeLengthDataConverter}}"
                                       Height="{Binding Data.RectangleShapeData.Height, Source={StaticResource BindingProxy}, Converter={StaticResource NegativeLengthDataConverter}}" 
                                       Fill="{Binding Source={x:Static p:Settings.Default}, Path=LassoFillColor}" 
                                       Stroke="{Binding Source={x:Static p:Settings.Default}, Path=LassoStrokeColor}"
                                       StrokeThickness="{Binding Source={x:Static p:Settings.Default}, Path=UIPolygonStrokeThickness}"/>
                            <Ellipse Canvas.Top="{Binding Data.OvalShapeData, Source={StaticResource BindingProxy}, Converter={StaticResource ShapeData2TopConverter}}"
                                     Canvas.Left="{Binding Data.OvalShapeData, Source={StaticResource BindingProxy}, Converter={StaticResource ShapeData2LeftConverter}}"
                                     Width="{Binding Data.OvalShapeData.Width, Source={StaticResource BindingProxy}, Converter={StaticResource NegativeLengthDataConverter}}"
                                     Height="{Binding Data.OvalShapeData.Height, Source={StaticResource BindingProxy}, Converter={StaticResource NegativeLengthDataConverter}}" 
                                     Fill="{Binding Source={x:Static p:Settings.Default}, Path=LassoFillColor}" 
                                     Stroke="{Binding Source={x:Static p:Settings.Default}, Path=LassoStrokeColor}"
                                     StrokeThickness="{Binding Source={x:Static p:Settings.Default}, Path=UIPolygonStrokeThickness}"/>
                            <Polygon Points="{Binding Data.LassoPoints, Source={StaticResource BindingProxy}}" 
                                     Fill="{Binding Source={x:Static p:Settings.Default}, Path=LassoFillColor}" 
                                     Stroke="{Binding Source={x:Static p:Settings.Default}, Path=LassoStrokeColor}"
                                     StrokeThickness="{Binding Source={x:Static p:Settings.Default}, Path=UIPolygonStrokeThickness}"/>
                        </Canvas>
                    </Grid>
                </uc:CommonZoomView.ContainerContent>
            </uc:CommonZoomView>
            <StackPanel Margin="25">
                <StackPanel.Visibility>
                    <MultiBinding Converter="{StaticResource SelectionControllerVisibility}">
                        <Binding Path="SelectionModeEnabled"></Binding>
                        <Binding Path="SelectionDrawing"></Binding>
                    </MultiBinding>
                </StackPanel.Visibility>
                <Grid Background="#7F000000">
                    <StackPanel FlowDirection="LeftToRight" Orientation="Horizontal" HorizontalAlignment="Center">
                        <RadioButton Margin="5" GroupName="SelectionMode" Style="{StaticResource {x:Type ToggleButton}}" Content="New"
                                     IsChecked="{Binding SelectionMode, Converter={StaticResource SelectionModeConverter}, ConverterParameter=0, Mode=TwoWay}"/>
                        <RadioButton Margin="5" GroupName="SelectionMode" Style="{StaticResource {x:Type ToggleButton}}" Content="Add"
                                     IsChecked="{Binding SelectionMode, Converter={StaticResource SelectionModeConverter}, ConverterParameter=1, Mode=TwoWay}"/>
                        <RadioButton Margin="5" GroupName="SelectionMode" Style="{StaticResource {x:Type ToggleButton}}" Content="Subtract"
                                     IsChecked="{Binding SelectionMode, Converter={StaticResource SelectionModeConverter}, ConverterParameter=2, Mode=TwoWay}"/>
                        <RadioButton Margin="5" GroupName="SelectionMode" Style="{StaticResource {x:Type ToggleButton}}" Content="Intersect"
                                     IsChecked="{Binding SelectionMode, Converter={StaticResource SelectionModeConverter}, ConverterParameter=3, Mode=TwoWay}"/>
                        <Border Width="1" Margin="2" Background="White"/>
                        <RadioButton Margin="5" GroupName="SelectionType" Style="{StaticResource {x:Type ToggleButton}}" Content="Lasso"
                                     IsChecked="{Binding SelectionType, Converter={StaticResource SelectionTypeConverter}, ConverterParameter=0, Mode=TwoWay}"/>
                        <RadioButton Margin="5" GroupName="SelectionType" Style="{StaticResource {x:Type ToggleButton}}" Content="Rect" 
                                     IsChecked="{Binding SelectionType, Converter={StaticResource SelectionTypeConverter}, ConverterParameter=1, Mode=TwoWay}"/>
                        <RadioButton Margin="5" GroupName="SelectionType" Style="{StaticResource {x:Type ToggleButton}}" Content="Oval"
                                     IsChecked="{Binding SelectionType, Converter={StaticResource SelectionTypeConverter}, ConverterParameter=2, Mode=TwoWay}"/>
                    </StackPanel>
                </Grid>
            </StackPanel>
        </Grid>
        <Grid Grid.Row="1" Grid.Column="4" ClipToBounds="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="1*"/>
                    <RowDefinition Height="2"/>
                    <RowDefinition Height="1*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" Grid.Row="0">
                        <ToggleButton Margin="2"
                                IsChecked="{Binding LabelMode, Mode=TwoWay}"
                                IsEnabled="{Binding SelectedImageItem, Mode=OneWay, Converter={StaticResource BoolVC}}"> + </ToggleButton>
                        <Button Margin="2" Command="{Binding DeleteNotationGroup}"
                                IsEnabled="{Binding SelectedNotationGroupItem, Mode=OneWay, Converter={StaticResource BoolVC}}"> - </Button>
                        <Button Margin="2" Command="{Binding MoveNotationGroupUp}"
                                IsEnabled="{Binding SelectedNotationGroupItem, Mode=OneWay, Converter={StaticResource BoolVC}}"> ↑ </Button>
                        <Button Margin="2" Command="{Binding MoveNotationGroupDown}"
                                IsEnabled="{Binding SelectedNotationGroupItem, Mode=OneWay, Converter={StaticResource BoolVC}}"> ↓ </Button>
                        <ToggleButton Margin="2" IsChecked="{Binding SelectedNotationGroupItem.IsFinished, Mode=TwoWay}"
                                Foreground="{Binding SelectedNotationGroupItem.IsFinished, Converter={StaticResource ColorStatus}}"
                                IsEnabled="{Binding SelectedNotationGroupItem, Mode=OneWay, Converter={StaticResource BoolVC}}"> √ </ToggleButton>
                    </StackPanel>
                    <ListView Grid.Row="1" x:Name="NotationGroupListView"
                              ItemsSource="{Binding NotationGroups, Mode=OneWay}"
                              SelectedItem="{Binding SelectedNotationGroupItem, Mode=TwoWay}">
                        <ListView.View>
                            <GridView>
                                <GridViewColumn Header="编号">
                                    <GridViewColumn.DisplayMemberBinding>
                                        <MultiBinding Converter="{StaticResource NotationGroup2IndexString}">
                                            <Binding/>
                                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}}" 
                                                     Path="DataContext.NotationGroups"/>
                                        </MultiBinding>
                                    </GridViewColumn.DisplayMemberBinding>
                                </GridViewColumn>
                                <GridViewColumn Header="标注列表">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <TextBlock Text="{Binding Text}" Foreground="{Binding IsFinished, Converter={StaticResource ColorStatus}}"/>
                                            </Grid>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="涂白状态">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <TextBlock Text="{Binding CleaningNotation, Converter={StaticResource Cleaning2StatusString}}" 
                                                           Foreground="{Binding IsFinished, Converter={StaticResource ColorStatus}}"/>
                                            </Grid>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="嵌字状态">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock/>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                            </GridView>
                        </ListView.View>
                    </ListView>
                </Grid>
                <GridSplitter HorizontalAlignment="Stretch" Grid.Row="1"/>
                <TabControl Grid.Row="2"
                            IsEnabled="{Binding SelectedNotationGroupItem, Mode=OneWay, Converter={StaticResource BoolVC}}">
                    <TabItem Header="录入">
                        <local:InputtingControl SelectedNotationGroupItem="{Binding SelectedNotationGroupItem, Mode=TwoWay}"/>
                    </TabItem>
                    <TabItem Header="背景处理">
                        <ScrollViewer VerticalScrollBarVisibility="Hidden">
                            <StackPanel Orientation="Vertical">
                                <!--区域选择模块-->
                                <TextBlock Margin="5">区域选择</TextBlock>
                                <TextBlock Margin="2" Text="{Binding SelectedNotationGroupItem, Converter={StaticResource NotationGroup2CleaningStatusString}}" 
                                           Background="{Binding SelectedNotationGroupItem, Converter={StaticResource NotationGroup2CleaningStatusColor}}" HorizontalAlignment="Center"/>
                                <Button Margin="2" Click="EnableSelectionMode">选择区域</Button>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Button Margin="2" Grid.Column="0" Command="{Binding ZoomInSelectionArea}">放大</Button>
                                    <Button Margin="2" Grid.Column="1" Command="{Binding ZoomOutSelectionArea}">缩小</Button>
                                    <Button Margin="2" Grid.Column="2" Command="{Binding ClearSelectionArea}">清空</Button>
                                    <Button Margin="2" Grid.Column="3" Command="{Binding CheckAllSelectionArea}">全选</Button>
                                    <Button Margin="2" Grid.Column="4" Command="{Binding InverseSelectionArea}">反选</Button>
                                </Grid>
                                <Separator Margin="2 2 2 2"/>
                                <!--模式选择模块-->
                                <TextBlock Margin="5">模式选择</TextBlock>
                                <RadioButton x:Name="NormalCleaningRadioButton" GroupName="CleaningGroup" Margin="5" Checked="CleaningColorChecked" 
                                             IsChecked="{Binding SelectedNotationGroupItem.CleaningNotation, Mode=OneWay, Converter={StaticResource CleaningNotation2Boolean4Color}}">
                                    Color Mode
                                </RadioButton>
                                <StackPanel Margin="25 2 5 2" IsEnabled="{Binding ElementName=NormalCleaningRadioButton, Path=IsChecked}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Grid.Column="0" Margin="2" VerticalAlignment="Center">设置颜色</TextBlock>
                                        <uc:CustomPortableColorPicker Margin="2" Grid.Column="1" ColorPickingStartedEventHandler="ColorPickingStarted" ColorPickingFinishedEventHandler="ColorPickingFinished"
                                             SelectedColor="{Binding SelectedNotationGroupItem.CleaningNotation.CleaningNotationColor, Mode=TwoWay, Converter={StaticResource Standard2WindowsColorConverter}}"/>
                                    </Grid>
                                    <Button Margin="2" Command="{Binding DetectMaxColor}">提取众色</Button>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Button Grid.Column="0" Margin="2" Command="{Binding DetectPeakColor}">峰值提取 [右侧设置基准色]</Button>
                                        <uc:CustomPortableColorPicker Margin="2" Grid.Column="1" ColorPickingStartedEventHandler="ColorPickingStarted" ColorPickingFinishedEventHandler="ColorPickingFinished"
                                            SelectedColor="{Binding PeakColor, Mode=TwoWay, Converter={StaticResource Standard2WindowsColorConverter}}"/>
                                    </Grid>
                                </StackPanel>
                                <Separator Margin="25 2 5 2"/>
                                <RadioButton x:Name="CustomCleaningRadioButton" GroupName="CleaningGroup" Margin="5" Checked="CleaningImpaintingChecked"
                                             IsChecked="{Binding SelectedNotationGroupItem.CleaningNotation, Mode=OneWay, Converter={StaticResource CleaningNotation2Boolean4Impainting}}">
                                    Impainting Mode
                                </RadioButton>
                                <WrapPanel Margin="25 2 5 2" IsEnabled="{Binding ElementName=CustomCleaningRadioButton, Path=IsChecked}">
                                    <Button Margin="2">清除修复</Button>
                                </WrapPanel>
                                <Separator Margin="2 2 2 2"/>
                                <!--Photoshop模块-->
                                <TextBlock Margin="5">Photoshop相关</TextBlock>
                                <WrapPanel Margin="25 2 2 2">
                                    <Button Margin="2">定位到自动导出图层</Button>
                                    <Button Margin="2">删除自动导出图层</Button>
                                </WrapPanel>
                                <Separator Margin="25 2 5 2"/>
                                <CheckBox Margin="30 5 5 2" IsChecked="{Binding SelectedNotationGroupItem.CleaningNotation.DontAutoExport}">不自动导出背景</CheckBox>
                                <WrapPanel Margin="25 2 2 2">
                                    <Button Margin="2">导出当前选区为自定义蒙版</Button>
                                    <Button Margin="2">导出当前背景到自定义图层</Button>
                                    <Button Margin="2">定位到导出的自定义图层组</Button>
                                    <Button Margin="2">删除自定义图层组</Button>
                                </WrapPanel>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>
                    <TabItem Header="嵌字">

                    </TabItem>
                </TabControl>
                <StatusBar Grid.Row="3">
                    <TextBlock x:Name="GlobalStatusInformationLabel" TextWrapping="Wrap" Text="{Binding TopMessage}"/>
                </StatusBar>
            </Grid>
            <Rectangle Fill="#7F000000" Visibility="{Binding SelectionModeEnabled, Converter={StaticResource Boolean2Visibility}}" MouseDown="ShadeMouseDown"/>
        </Grid>
    </Grid>
</Window>
